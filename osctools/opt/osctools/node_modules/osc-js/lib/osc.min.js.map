{"version":3,"file":"osc.min.js","sources":["../src/common/utils.js","../src/common/helpers.js","../src/atomic.js","../src/atomic/int32.js","../src/atomic/string.js","../src/atomic/timetag.js","../src/atomic/blob.js","../src/atomic/float32.js","../src/atomic/float64.js","../src/atomic/int64.js","../src/atomic/uint64.js","../src/atomic/constant.js","../src/message.js","../src/bundle.js","../src/packet.js","../src/events.js","../src/plugin/plugin.js","../src/plugin/dgram.js","../src/external/ws.js","../src/plugin/bridge.js","../src/plugin/wsclient.js","../src/plugin/wsserver.js","../src/osc.js"],"sourcesContent":["/**\n * Check if given object is an integer number\n * @param {*} n\n * @return {boolean}\n */\nexport function isInt(n) {\n  return Number(n) === n && n % 1 === 0\n}\n\n/**\n * Check if given object is a float number\n * @param {*} n\n * @return {boolean}\n */\nexport function isFloat(n) {\n  return Number(n) === n && n % 1 !== 0\n}\n\n/**\n * Check if given object is a number\n * @param {*} n\n * @return {boolean}\n */\nexport function isNumber(n) {\n  return Number(n) === n\n}\n\n/**\n * Check if given object is a string\n * @param {*} n\n * @return {boolean}\n */\nexport function isString(n) {\n  return typeof n === 'string'\n}\n\n/**\n * Check if given object is a boolean\n * @param {*} n\n * @return {boolean}\n */\nexport function isBoolean(n) {\n  return typeof n === 'boolean'\n}\n\n/**\n * Check if given object is infinity constant\n * @param {*} n\n * @return {boolean}\n */\nexport function isInfinity(n) {\n  return n === Infinity\n}\n\n/**\n * Check if given object is an array\n * @param {*} n\n * @return {boolean}\n */\nexport function isArray(n) {\n  return Object.prototype.toString.call(n) === '[object Array]'\n}\n\n/**\n * Check if given object is an object\n * @param {*} n\n * @return {boolean}\n */\nexport function isObject(n) {\n  return Object.prototype.toString.call(n) === '[object Object]'\n}\n\n/**\n * Check if given object is a function\n * @param {*} n\n * @return {boolean}\n */\nexport function isFunction(n) {\n  return typeof n === 'function'\n}\n\n/**\n * Check if given object is a Uint8Array\n * @param {*} n\n * @return {boolean}\n */\nexport function isBlob(n) {\n  return n instanceof Uint8Array\n}\n\n/**\n * Check if given object is a Date\n * @param {*} n\n * @return {boolean}\n */\nexport function isDate(n) {\n  return n instanceof Date\n}\n\n/**\n * Check if given object is undefined\n * @param {*} n\n * @return {boolean}\n */\nexport function isUndefined(n) {\n  return typeof n === 'undefined'\n}\n\n/**\n * Check if given object is null\n * @param {*} n\n * @return {boolean}\n */\nexport function isNull(n) {\n  return n === null\n}\n\n/**\n * Return the next multiple of four\n * @param {number} n\n */\nexport function pad(n) {\n  return (n + 3) & ~0x03\n}\n\n/**\n * Checks if environment provides a feature\n * @param {string} name Name of needed feature\n * @return {boolean}\n */\nexport function hasProperty(name) {\n  return Object.prototype.hasOwnProperty.call(\n    (typeof global !== 'undefined' ? global : window), // eslint-disable-line no-undef\n    name,\n  )\n}\n\n/**\n * Wrap binary data in DataView\n * @param {*} obj\n * @return {DataView}\n */\nexport function dataView(obj) {\n  if (obj.buffer) {\n    return new DataView(obj.buffer)\n  } else if (obj instanceof ArrayBuffer) {\n    return new DataView(obj)\n  }\n\n  return new DataView(new Uint8Array(obj))\n}\n","import {\n  isArray,\n  isBlob,\n  isBoolean,\n  isFloat,\n  isInfinity,\n  isInt,\n  isNull,\n  isString,\n} from './utils'\n\n/**\n * Checks type of given object and returns the regarding OSC\n * Type tag character\n * @param {*} item Any object\n * @return {string} OSC Type tag character\n */\nexport function typeTag(item) {\n  if (isInt(item)) {\n    return 'i'\n  } else if (isFloat(item)) {\n    return 'f'\n  } else if (isString(item)) {\n    return 's'\n  } else if (isBlob(item)) {\n    return 'b'\n  } else if (isBoolean(item)) {\n    return item ? 'T' : 'F'\n  } else if (isNull(item)) {\n    return 'N'\n  } else if (isInfinity(item)) {\n    return 'I'\n  }\n\n  throw new Error('OSC typeTag() found unknown value type')\n}\n\n/**\n * Sanitizes an OSC-ready Address Pattern\n * @param {string[]|string} obj Address as string or array of strings\n * @return {string} Corrected address string\n *\n * @example\n * // all calls return '/test/path' string:\n * prepareAddress('test/path')\n * prepareAddress('/test/path/')\n * prepareAddress([test, path])\n */\nexport function prepareAddress(obj) {\n  let address = ''\n\n  if (isArray(obj)) {\n    return `/${obj.join('/')}`\n  } else if (isString(obj)) {\n    address = obj\n\n    // remove slash at ending of address\n    if (address.length > 1 && address[address.length - 1] === '/') {\n      address = address.slice(0, address.length - 1)\n    }\n\n    // add slash at beginning of address\n    if (address.length > 1 && address[0] !== '/') {\n      address = `/${address}`\n    }\n\n    return address\n  }\n\n  throw new Error('OSC prepareAddress() needs addresses of type array or string')\n}\n\n/**\n * Make an OSC address pattern javascript-regex-ready\n * @param {string} str OSC address pattern\n * @return {string} Javascript RegEx string\n */\nexport function prepareRegExPattern(str) {\n  let pattern\n\n  if (!(isString(str))) {\n    throw new Error('OSC prepareRegExPattern() needs strings')\n  }\n\n  pattern = str.replace(/\\./g, '\\\\.')\n  pattern = pattern.replace(/\\(/g, '\\\\(')\n  pattern = pattern.replace(/\\)/g, '\\\\)')\n\n  pattern = pattern.replace(/\\{/g, '(')\n  pattern = pattern.replace(/\\}/g, ')')\n  pattern = pattern.replace(/,/g, '|')\n\n  pattern = pattern.replace(/\\[!/g, '[^')\n\n  pattern = pattern.replace(/\\?/g, '.')\n  pattern = pattern.replace(/\\*/g, '.*')\n\n  return pattern\n}\n\n/**\n * Holds a list of items and helps to merge them\n * into a single array of packed binary data\n */\nexport default class EncodeHelper {\n  /**\n   * Create a new EncodeHelper instance\n   */\n  constructor() {\n    /** @type {array} data */\n    this.data = []\n    /** @type {number} byteLength */\n    this.byteLength = 0\n  }\n\n  /**\n   * Packs an item and adds it to the list\n   * @param {*} item Any object\n   * @return {EncodeHelper}\n   */\n  add(item) {\n    // Skip encoding items which do not need a payload as they are constants\n    if (isBoolean(item) || isInfinity(item) || isNull(item)) {\n      return this\n    }\n\n    const buffer = item.pack()\n    this.byteLength += buffer.byteLength\n    this.data.push(buffer)\n\n    return this\n  }\n\n  /**\n   * Merge all added items into one Uint8Array\n   * @return {Uint8Array} Merged binary data array of all items\n   */\n  merge() {\n    const result = new Uint8Array(this.byteLength)\n    let offset = 0\n\n    this.data.forEach((data) => {\n      result.set(data, offset)\n      offset += data.byteLength\n    })\n\n    return result\n  }\n}\n","import { isUndefined } from './common/utils'\n\n/**\n * Base class for OSC Atomic Data Types\n */\nexport default class Atomic {\n  /**\n   * Create an Atomic instance\n   * @param {*} [value] Initial value of any type\n   */\n  constructor(value) {\n    /** @type {*} value */\n    this.value = value\n    /** @type {number} offset */\n    this.offset = 0\n  }\n\n  /**\n   * Interpret the given value of this entity as packed binary data\n   * @param {string} method The DataView method to write to the ArrayBuffer\n   * @param {number} byteLength Size of array in bytes\n   * @return {Uint8Array} Packed binary data\n   */\n  pack(method, byteLength) {\n    if (!(method && byteLength)) {\n      throw new Error('OSC Atomic cant\\'t be packed without given method or byteLength')\n    }\n\n    const data = new Uint8Array(byteLength)\n    const dataView = new DataView(data.buffer)\n\n    if (isUndefined(this.value)) {\n      throw new Error('OSC Atomic cant\\'t be encoded with empty value')\n    }\n\n    // use DataView to write to ArrayBuffer\n    dataView[method](this.offset, this.value, false)\n\n    // always return binary Uint8Array after packing\n    return data\n  }\n\n  /**\n   * Unpack binary data from DataView according to the given format\n   * @param {DataView} dataView The DataView holding the binary representation of the value\n   * @param {string} method The DataView method to read the format from the ArrayBuffer\n   * @param {number} byteLength Size of array in bytes\n   * @param {number} [initialOffset=0] Offset of DataView before unpacking\n   * @return {number} Offset after unpacking\n   */\n  unpack(dataView, method, byteLength, initialOffset = 0) {\n    if (!(dataView && method && byteLength)) {\n      throw new Error('OSC Atomic cant\\'t be unpacked without given dataView, method or byteLength')\n    }\n\n    if (!(dataView instanceof DataView)) {\n      throw new Error('OSC Atomic expects an instance of type DataView')\n    }\n\n    // use DataView to read from ArrayBuffer and add offset\n    this.value = dataView[method](initialOffset, false)\n    this.offset = initialOffset + byteLength\n\n    // always return offset number after unpacking\n    return this.offset\n  }\n}\n","import { isInt } from '../common/utils'\n\nimport Atomic from '../atomic'\n\n/**\n * 32-bit big-endian two's complement integer OSC Atomic Data Type\n */\nexport default class AtomicInt32 extends Atomic {\n  /**\n   * Create an AtomicInt32 instance\n   * @param {number} [value] Initial integer value\n   */\n  constructor(value) {\n    if (value && !isInt(value)) {\n      throw new Error('OSC AtomicInt32 constructor expects value of type number')\n    }\n\n    super(value)\n  }\n\n  /**\n   * Interpret the given number as packed binary data\n   * @return {Uint8Array} Packed binary data\n   */\n  pack() {\n    return super.pack('setInt32', 4)\n  }\n\n  /**\n   * Unpack binary data from DataView and read a Int32 number\n   * @param {DataView} dataView The DataView holding the binary representation of the value\n   * @param {number} [initialOffset=0] Offset of DataView before unpacking\n   * @return {number} Offset after unpacking\n   */\n  unpack(dataView, initialOffset = 0) {\n    return super.unpack(dataView, 'getInt32', 4, initialOffset)\n  }\n}\n","import {\n  hasProperty,\n  isString,\n  isUndefined,\n  pad,\n} from '../common/utils'\n\nimport Atomic from '../atomic'\n\n/** Slice size of large strings for fallback method */\nconst STR_SLICE_SIZE = 65537\n\n/** Text encoding format */\nconst STR_ENCODING = 'utf-8'\n\n/**\n * Helper method to decode a string using different methods depending on environment\n * @param {number[]} charCodes Array of char codes\n * @return {string} Decoded string\n */\nfunction charCodesToString(charCodes) {\n  // Use these methods to be able to convert large strings\n  if (hasProperty('Buffer')) {\n    return Buffer.from(charCodes).toString(STR_ENCODING)\n  } else if (hasProperty('TextDecoder')) {\n    return new TextDecoder(STR_ENCODING) // eslint-disable-line no-undef\n      .decode(new Int8Array(charCodes))\n  }\n\n  // Fallback method\n  let str = ''\n\n  for (let i = 0; i < charCodes.length; i += STR_SLICE_SIZE) {\n    str += String.fromCharCode.apply(\n      null,\n      charCodes.slice(i, i + STR_SLICE_SIZE),\n    )\n  }\n\n  return str\n}\n\n/**\n * A sequence of non-null ASCII characters OSC Atomic Data Type\n */\nexport default class AtomicString extends Atomic {\n  /**\n   * Create an AtomicString instance\n   * @param {string} [value] Initial string value\n   */\n  constructor(value) {\n    if (value && !isString(value)) {\n      throw new Error('OSC AtomicString constructor expects value of type string')\n    }\n\n    super(value)\n  }\n\n  /**\n   * Interpret the given string as packed binary data\n   * @return {Uint8Array} Packed binary data\n   */\n  pack() {\n    if (isUndefined(this.value)) {\n      throw new Error('OSC AtomicString can not be encoded with empty value')\n    }\n\n    // add 0-3 null characters for total number of bits a multiple of 32\n    const terminated = `${this.value}\\u0000`\n    const byteLength = pad(terminated.length)\n\n    const buffer = new Uint8Array(byteLength)\n\n    for (let i = 0; i < terminated.length; i += 1) {\n      buffer[i] = terminated.charCodeAt(i)\n    }\n\n    return buffer\n  }\n\n  /**\n   * Unpack binary data from DataView and read a string\n   * @param {DataView} dataView The DataView holding the binary representation of the string\n   * @param {number} [initialOffset=0] Offset of DataView before unpacking\n   * @return {number} Offset after unpacking\n   */\n  unpack(dataView, initialOffset = 0) {\n    if (!(dataView instanceof DataView)) {\n      throw new Error('OSC AtomicString expects an instance of type DataView')\n    }\n\n    let offset = initialOffset\n    let charcode\n    const charCodes = []\n\n    for (; offset < dataView.byteLength; offset += 1) {\n      charcode = dataView.getUint8(offset)\n\n      // check for terminating null character\n      if (charcode !== 0) {\n        charCodes.push(charcode)\n      } else {\n        offset += 1\n        break\n      }\n    }\n\n    if (offset === dataView.length) {\n      throw new Error('OSC AtomicString found a malformed OSC string')\n    }\n\n    /** @type {number} offset */\n    this.offset = pad(offset)\n    /** @type {string} value */\n    this.value = charCodesToString(charCodes)\n\n    return this.offset\n  }\n}\n","import {\n  isDate,\n  isInt,\n  isUndefined,\n} from '../common/utils'\n\nimport Atomic from '../atomic'\n\n/** 70 years in seconds */\nexport const SECONDS_70_YEARS = 2208988800\n/** 2^32 */\nexport const TWO_POWER_32 = 4294967296\n\n/**\n * Timetag helper class for representing NTP timestamps\n * and conversion between them and javascript representation\n */\nexport class Timetag {\n  /**\n   * Create a Timetag instance\n   * @param {number} [seconds=0] Initial NTP *seconds* value\n   * @param {number} [fractions=0] Initial NTP *fractions* value\n   */\n  constructor(seconds = 0, fractions = 0) {\n    if (!(isInt(seconds) && isInt(fractions))) {\n      throw new Error('OSC Timetag constructor expects values of type integer number')\n    }\n\n    /** @type {number} seconds */\n    this.seconds = seconds\n    /** @type {number} fractions */\n    this.fractions = fractions\n  }\n\n  /**\n   * Converts from NTP to JS representation and back\n   * @param {number} [milliseconds] Converts from JS milliseconds to NTP.\n   * Leave empty for converting from NTP to JavaScript representation\n   * @return {number} Javascript timestamp\n   */\n  timestamp(milliseconds) {\n    let seconds\n\n    if (typeof milliseconds === 'number') {\n      seconds = milliseconds / 1000\n      const rounded = Math.floor(seconds)\n\n      this.seconds = rounded + SECONDS_70_YEARS\n      this.fractions = Math.round(TWO_POWER_32 * (seconds - rounded))\n\n      return milliseconds\n    }\n\n    seconds = this.seconds - SECONDS_70_YEARS\n    return (seconds + Math.round(this.fractions / TWO_POWER_32)) * 1000\n  }\n}\n\n/**\n * 64-bit big-endian fixed-point time tag, semantics\n * defined below OSC Atomic Data Type\n */\nexport default class AtomicTimetag extends Atomic {\n  /**\n   * Create a AtomicTimetag instance\n   * @param {number|Timetag|Date} [value] Initial date, leave empty if\n   * you want it to be the current date\n   */\n  constructor(value = Date.now()) {\n    let timetag = new Timetag()\n\n    if (value instanceof Timetag) {\n      timetag = value\n    } else if (isInt(value)) {\n      timetag.timestamp(value)\n    } else if (isDate(value)) {\n      timetag.timestamp(value.getTime())\n    }\n\n    super(timetag)\n  }\n\n  /**\n   * Interpret the given timetag as packed binary data\n   * @return {Uint8Array} Packed binary data\n   */\n  pack() {\n    if (isUndefined(this.value)) {\n      throw new Error('OSC AtomicTimetag can not be encoded with empty value')\n    }\n\n    const { seconds, fractions } = this.value\n    const data = new Uint8Array(8)\n    const dataView = new DataView(data.buffer)\n\n    dataView.setInt32(0, seconds, false)\n    dataView.setInt32(4, fractions, false)\n\n    return data\n  }\n\n  /**\n   * Unpack binary data from DataView and read a timetag\n   * @param {DataView} dataView The DataView holding the binary representation of the timetag\n   * @param {number} [initialOffset=0] Offset of DataView before unpacking\n   * @return {number} Offset after unpacking\n   */\n  unpack(dataView, initialOffset = 0) {\n    if (!(dataView instanceof DataView)) {\n      throw new Error('OSC AtomicTimetag expects an instance of type DataView')\n    }\n\n    const seconds = dataView.getUint32(initialOffset, false)\n    const fractions = dataView.getUint32(initialOffset + 4, false)\n\n    /** @type {Timetag} value */\n    this.value = new Timetag(seconds, fractions)\n    /** @type {number} offset */\n    this.offset = initialOffset + 8\n\n    return this.offset\n  }\n}\n","import {\n  isBlob,\n  isUndefined,\n  pad,\n} from '../common/utils'\n\nimport Atomic from '../atomic'\n\n/**\n * 8-bit bytes of arbitrary binary data OSC Atomic Data Type\n */\nexport default class AtomicBlob extends Atomic {\n  /**\n   * Create an AtomicBlob instance\n   * @param {Uint8Array} [value] Binary data\n   */\n  constructor(value) {\n    if (value && !isBlob(value)) {\n      throw new Error('OSC AtomicBlob constructor expects value of type Uint8Array')\n    }\n\n    super(value)\n  }\n\n  /**\n   * Interpret the given blob as packed binary data\n   * @return {Uint8Array} Packed binary data\n   */\n  pack() {\n    if (isUndefined(this.value)) {\n      throw new Error('OSC AtomicBlob can not be encoded with empty value')\n    }\n\n    const byteLength = pad(this.value.byteLength)\n    const data = new Uint8Array(byteLength + 4)\n    const dataView = new DataView(data.buffer)\n\n    // an int32 size count\n    dataView.setInt32(0, this.value.byteLength, false)\n    // followed by 8-bit bytes of arbitrary binary data\n    data.set(this.value, 4)\n\n    return data\n  }\n\n  /**\n   * Unpack binary data from DataView and read a blob\n   * @param {DataView} dataView The DataView holding the binary representation of the blob\n   * @param {number} [initialOffset=0] Offset of DataView before unpacking\n   * @return {number} Offset after unpacking\n   */\n  unpack(dataView, initialOffset = 0) {\n    if (!(dataView instanceof DataView)) {\n      throw new Error('OSC AtomicBlob expects an instance of type DataView')\n    }\n\n    const byteLength = dataView.getInt32(initialOffset, false)\n\n    /** @type {Uint8Array} value */\n    this.value = new Uint8Array(dataView.buffer, initialOffset + 4, byteLength)\n    /** @type {number} offset */\n    this.offset = pad(initialOffset + 4 + byteLength)\n\n    return this.offset\n  }\n}\n","import { isNumber } from '../common/utils'\n\nimport Atomic from '../atomic'\n\n/**\n * 32-bit big-endian IEEE 754 floating point number OSC Atomic Data Type\n */\nexport default class AtomicFloat32 extends Atomic {\n  /**\n   * Create an AtomicFloat32 instance\n   * @param {number} [value] Float number\n   */\n  constructor(value) {\n    if (value && !isNumber(value)) {\n      throw new Error('OSC AtomicFloat32 constructor expects value of type float')\n    }\n\n    super(value)\n  }\n\n  /**\n   * Interpret the given number as packed binary data\n   * @return {Uint8Array} Packed binary data\n   */\n  pack() {\n    return super.pack('setFloat32', 4)\n  }\n\n  /**\n   * Unpack binary data from DataView and read a Float32 number\n   * @param {DataView} dataView The DataView holding the binary representation of the value\n   * @param {number} [initialOffset=0] Offset of DataView before unpacking\n   * @return {number} Offset after unpacking\n   */\n  unpack(dataView, initialOffset = 0) {\n    return super.unpack(dataView, 'getFloat32', 4, initialOffset)\n  }\n}\n","import { isNumber } from '../common/utils'\n\nimport Atomic from '../atomic'\n\n/**\n * 64-bit big-endian IEEE 754 floating point number OSC Atomic Data Type\n */\nexport default class AtomicFloat64 extends Atomic {\n  /**\n   * Create an AtomicFloat64 instance\n   * @param {number} [value] Float number\n   */\n  constructor(value) {\n    if (value && !isNumber(value)) {\n      throw new Error('OSC AtomicFloat64 constructor expects value of type float')\n    }\n\n    super(value)\n  }\n\n  /**\n   * Interpret the given number as packed binary data\n   * @return {Uint8Array} Packed binary data\n   */\n  pack() {\n    return super.pack('setFloat64', 8)\n  }\n\n  /**\n   * Unpack binary data from DataView and read a Float64 number\n   * @param {DataView} dataView The DataView holding the binary representation of the value\n   * @param {number} [initialOffset=0] Offset of DataView before unpacking\n   * @return {number} Offset after unpacking\n   */\n  unpack(dataView, initialOffset = 0) {\n    return super.unpack(dataView, 'getFloat64', 8, initialOffset)\n  }\n}\n","import Atomic from '../atomic'\n\nconst MAX_INT64 = BigInt('9223372036854775807')\nconst MIN_INT64 = BigInt('-9223372036854775808')\n\n/**\n * 64-bit big-endian two's complement integer OSC Atomic Data Type\n */\nexport default class AtomicInt64 extends Atomic {\n  /**\n   * Create an AtomicInt64 instance\n   * @param {number} [value] Initial integer value\n   */\n  constructor(value) {\n    if (value && typeof value !== 'bigint') {\n      throw new Error('OSC AtomicInt64 constructor expects value of type BigInt')\n    }\n\n    if (value && (value < MIN_INT64 || value > MAX_INT64)) {\n      throw new Error('OSC AtomicInt64 value is out of bounds')\n    }\n\n    let tmp\n    if (value) {\n      tmp = BigInt.asIntN(64, value)\n    }\n\n    super(tmp)\n  }\n\n  /**\n   * Interpret the given number as packed binary data\n   * @return {Uint8Array} Packed binary data\n   */\n  pack() {\n    return super.pack('setBigInt64', 8)\n  }\n\n  /**\n   * Unpack binary data from DataView and read a Int64 number\n   * @param {DataView} dataView The DataView holding the binary representation of the value\n   * @param {number} [initialOffset=0] Offset of DataView before unpacking\n   * @return {number} Offset after unpacking\n   */\n  unpack(dataView, initialOffset = 0) {\n    return super.unpack(dataView, 'getBigInt64', 8, initialOffset)\n  }\n}\n","import Atomic from '../atomic'\n\nconst MAX_UINT64 = BigInt('18446744073709551615')\n\n/**\n * Unsigned 64-bit big-endian two's complement integer OSC Atomic Data Type\n */\nexport default class AtomicUInt64 extends Atomic {\n  /**\n   * Create an AtomicUInt64 instance\n   * @param {number} [value] Initial integer value\n   */\n  constructor(value) {\n    if (value && typeof value !== 'bigint') {\n      throw new Error('OSC AtomicUInt64 constructor expects value of type BigInt')\n    }\n\n    if (value && (value < 0 || value > MAX_UINT64)) {\n      throw new Error('OSC AtomicUInt64 value is out of bounds')\n    }\n\n    let tmp\n    if (value) {\n      tmp = BigInt.asUintN(64, value)\n    }\n\n    super(tmp)\n  }\n\n  /**\n   * Interpret the given number as packed binary data\n   * @return {Uint8Array} Packed binary data\n   */\n  pack() {\n    return super.pack('setBigUint64', 8)\n  }\n\n  /**\n   * Unpack binary data from DataView and read a UInt64 number\n   * @param {DataView} dataView The DataView holding the binary representation of the value\n   * @param {number} [initialOffset=0] Offset of DataView before unpacking\n   * @return {number} Offset after unpacking\n   */\n  unpack(dataView, initialOffset = 0) {\n    return super.unpack(dataView, 'getBigUint64', 8, initialOffset)\n  }\n}\n","/**\n * Extended boolean type without data representing \"True\"\n */\nexport const VALUE_TRUE = true\n\n/**\n * Extended boolean type without data representing \"False\"\n */\nexport const VALUE_FALSE = false\n\n/**\n * Extended type without data representing \"None\"\n * @type {null}\n */\nexport const VALUE_NONE = null\n\n/**\n * Extended type without data representing \"Infinity\"\n */\nexport const VALUE_INFINITY = Infinity\n","import {\n  isArray,\n  isString,\n  isUndefined,\n} from './common/utils'\n\nimport Helper, { typeTag, prepareAddress } from './common/helpers'\n\nimport AtomicBlob from './atomic/blob'\nimport AtomicFloat32 from './atomic/float32'\nimport AtomicFloat64 from './atomic/float64'\nimport AtomicInt32 from './atomic/int32'\nimport AtomicInt64 from './atomic/int64'\nimport AtomicUInt64 from './atomic/uint64'\nimport AtomicString from './atomic/string'\nimport {\n  VALUE_NONE, VALUE_TRUE, VALUE_FALSE, VALUE_INFINITY,\n} from './atomic/constant'\n\n/**\n * A TypedMessage consists of an OSC address and an optional array of typed OSC arguments.\n *\n * @typedef {'i'|'f'|'s'|'b'|'h'|'t'|'d'|'T'|'F'|'N'|'I'} MessageArgType\n *\n * - `i` - int32\n * - `f` - float32\n * - `s` - string\n * - `b` - blob\n * - `h` - int64\n * - `t` - uint64\n * - `d` - double\n * - `T` - True (no argument data)\n * - `F` - False (no argument data)\n * - `N` - Nil (no argument data)\n * - `I` - Infinitum (no argument data)\n *\n * @typedef {number|string|Blob|VALUE_TRUE|VALUE_FALSE|VALUE_NONE|VALUE_INFINITY} MessageArgValue\n *\n * @typedef {object} MessageArgObject\n * @property {MessageArgType} type\n * @property {MessageArgValue} value\n *\n * @example\n * const messageArgObject = {\n *   type: 'i', value: 123\n * }\n */\nexport class TypedMessage {\n  /**\n   * Create a TypedMessage instance\n   * @param {string[]|string} address Address\n   * @param {MessageArgValue[]} args Arguments\n   *\n   * @example\n   * const message = new TypedMessage(['test', 'path'])\n   * message.add('d', 123.123456789)\n   * message.add('s', 'hello')\n   *\n   * @example\n   * const message = new TypedMessage('/test/path', [\n   *   { type: 'i', value: 123 },\n   *   { type: 'd', value: 123.123 },\n   *   { type: 'h', value: 0xFFFFFFn },\n   *   { type: 'T', value: null },\n   * ])\n   */\n  constructor(address, args) {\n    /**\n     * @type {number} offset\n     * @private\n     */\n    this.offset = 0\n    /** @type {string} address */\n    this.address = ''\n    /** @type {string} types */\n    this.types = ''\n    /** @type {MessageArgValue[]} args */\n    this.args = []\n\n    if (!isUndefined(address)) {\n      if (!(isString(address) || isArray(address))) {\n        throw new Error('OSC Message constructor first argument (address) must be a string or array')\n      }\n      this.address = prepareAddress(address)\n    }\n\n    if (!isUndefined(args)) {\n      if (!isArray(args)) {\n        throw new Error('OSC Message constructor second argument (args) must be an array')\n      }\n      args.forEach((item) => this.add(item.type, item.value))\n    }\n  }\n\n  /**\n   * Add an OSC Atomic Data Type to the list of elements\n   * @param {MessageArgType} type\n   * @param {MessageArgValue} item\n   */\n  add(type, item) {\n    if (isUndefined(type)) {\n      throw new Error('OSC Message needs a valid OSC Atomic Data Type')\n    }\n\n    if (type === 'N') {\n      this.args.push(VALUE_NONE)\n    } else if (type === 'T') {\n      this.args.push(VALUE_TRUE)\n    } else if (type === 'F') {\n      this.args.push(VALUE_FALSE)\n    } else if (type === 'I') {\n      this.args.push(VALUE_INFINITY)\n    } else {\n      this.args.push(item)\n    }\n\n    this.types += type\n  }\n\n  /**\n   * Interpret the Message as packed binary data\n   * @return {Uint8Array} Packed binary data\n   */\n  pack() {\n    if (this.address.length === 0 || this.address[0] !== '/') {\n      throw new Error('OSC Message has an invalid address')\n    }\n\n    const encoder = new Helper()\n\n    // OSC Address Pattern and Type string\n    encoder.add(new AtomicString(this.address))\n    encoder.add(new AtomicString(`,${this.types}`))\n\n    // followed by zero or more OSC Arguments\n    if (this.args.length > 0) {\n      let argument\n\n      if (this.args.length > this.types.length) {\n        throw new Error('OSC Message argument and type tag mismatch')\n      }\n\n      this.args.forEach((value, index) => {\n        const type = this.types[index]\n        if (type === 'i') {\n          argument = new AtomicInt32(value)\n        } else if (type === 'h') {\n          argument = new AtomicInt64(value)\n        } else if (type === 't') {\n          argument = new AtomicUInt64(value)\n        } else if (type === 'f') {\n          argument = new AtomicFloat32(value)\n        } else if (type === 'd') {\n          argument = new AtomicFloat64(value)\n        } else if (type === 's') {\n          argument = new AtomicString(value)\n        } else if (type === 'b') {\n          argument = new AtomicBlob(value)\n        } else if (type === 'T') {\n          argument = VALUE_TRUE\n        } else if (type === 'F') {\n          argument = VALUE_FALSE\n        } else if (type === 'N') {\n          argument = VALUE_NONE\n        } else if (type === 'I') {\n          argument = VALUE_INFINITY\n        } else {\n          throw new Error('OSC Message found unknown argument type')\n        }\n\n        encoder.add(argument)\n      })\n    }\n\n    return encoder.merge()\n  }\n\n  /**\n   * Unpack binary data to read a Message\n   * @param {DataView} dataView The DataView holding the binary representation of a Message\n   * @param {number} [initialOffset=0] Offset of DataView before unpacking\n   * @return {number} Offset after unpacking\n   */\n  unpack(dataView, initialOffset = 0) {\n    if (!(dataView instanceof DataView)) {\n      throw new Error('OSC Message expects an instance of type DataView.')\n    }\n\n    // read address pattern\n    const address = new AtomicString()\n    address.unpack(dataView, initialOffset)\n\n    // read type string\n    const types = new AtomicString()\n    types.unpack(dataView, address.offset)\n\n    if (address.value.length === 0 || address.value[0] !== '/') {\n      throw new Error('OSC Message found malformed or missing address string')\n    }\n\n    if (types.value.length === 0 && types.value[0] !== ',') {\n      throw new Error('OSC Message found malformed or missing type string')\n    }\n\n    let { offset } = types\n    let next\n    let type\n\n    const args = []\n\n    // read message arguments (OSC Atomic Data Types)\n    for (let i = 1; i < types.value.length; i += 1) {\n      type = types.value[i]\n      next = null\n\n      if (type === 'i') {\n        next = new AtomicInt32()\n      } else if (type === 'h') {\n        next = new AtomicInt64()\n      } else if (type === 't') {\n        next = new AtomicUInt64()\n      } else if (type === 'f') {\n        next = new AtomicFloat32()\n      } else if (type === 'd') {\n        next = new AtomicFloat64()\n      } else if (type === 's') {\n        next = new AtomicString()\n      } else if (type === 'b') {\n        next = new AtomicBlob()\n      } else if (type === 'T') {\n        args.push(VALUE_TRUE)\n      } else if (type === 'F') {\n        args.push(VALUE_FALSE)\n      } else if (type === 'N') {\n        args.push(VALUE_NONE)\n      } else if (type === 'I') {\n        args.push(VALUE_INFINITY)\n      } else {\n        throw new Error('OSC Message found unsupported argument type')\n      }\n\n      if (next) {\n        offset = next.unpack(dataView, offset)\n        args.push(next.value)\n      }\n    }\n\n    this.offset = offset\n    this.address = address.value\n    this.types = types.value\n    this.args = args\n\n    return this.offset\n  }\n}\n\n/**\n * An OSC message consists of an OSC Address Pattern followed\n * by an OSC Type Tag String followed by zero or more OSC Arguments\n */\nexport default class Message extends TypedMessage {\n  /**\n   * Create a Message instance\n   * @param {string[]|string} address Address\n   * @param {...MessageArgValue} args OSC Atomic Data Types\n   *\n   * @example\n   * const message = new Message(['test', 'path'], 50, 100.52, 'test')\n   *\n   * @example\n   * const message = new Message('/test/path', 51.2)\n   */\n  constructor(address, ...args) {\n    let oscArgs\n    if (args.length > 0) {\n      if (args[0] instanceof Array) {\n        oscArgs = args.shift()\n      }\n    }\n\n    super(address, oscArgs)\n\n    if (args.length > 0) {\n      this.types = args.map((item) => typeTag(item)).join('')\n      this.args = args\n    }\n  }\n\n  /**\n   * Add an OSC Atomic Data Type to the list of elements\n   * @param {MessageArgValue} item\n   */\n  add(item) {\n    super.add(typeTag(item), item)\n  }\n}\n","import EncodeHelper from './common/helpers'\nimport { isArray, isInt } from './common/utils'\n\nimport AtomicInt32 from './atomic/int32'\nimport AtomicString from './atomic/string'\nimport AtomicTimetag from './atomic/timetag'\nimport Message from './message'\n\n/** OSC Bundle string */\nexport const BUNDLE_TAG = '#bundle'\n\n/**\n * An OSC Bundle consist of a Timetag and one or many Bundle Elements.\n * The elements are either OSC Messages or more OSC Bundles\n */\nexport default class Bundle {\n  /**\n   * Create a Bundle instance\n   * @param {...*} args Timetag and elements. See examples for options\n   *\n   * @example\n   * const bundle = new Bundle(new Date() + 500)\n   *\n   * @example\n   * const message = new Message('/test/path', 51.2)\n   * const anotherBundle = new Bundle([message], Date.now() + 1500)\n   *\n   * @example\n   * const message = new Message('/test/path', 51.2)\n   * const anotherMessage = new Message('/test/message', 'test', 12)\n   * const anotherBundle = new Bundle(message, anotherMessage)\n   */\n  constructor(...args) {\n    /**\n     * @type {number} offset\n     * @private\n     */\n    this.offset = 0\n    /** @type {AtomicTimetag} timetag */\n    this.timetag = new AtomicTimetag()\n    /** @type {array} bundleElements */\n    this.bundleElements = []\n\n    if (args.length > 0) {\n      // first argument is an Date or js timestamp (number)\n      if (args[0] instanceof Date || isInt(args[0])) {\n        this.timetag = new AtomicTimetag(args[0])\n      } else if (isArray(args[0])) {\n        // first argument is an Array of Bundle elements\n        args[0].forEach((item) => {\n          this.add(item)\n        })\n\n        // second argument is an Date or js timestamp (number)\n        if (args.length > 1 && (args[1] instanceof Date || isInt(args[1]))) {\n          this.timetag = new AtomicTimetag(args[1])\n        }\n      } else {\n        // take all arguments as Bundle elements\n        args.forEach((item) => {\n          this.add(item)\n        })\n      }\n    }\n  }\n\n  /**\n   * Take a JavaScript timestamp to set the Bundle's timetag\n   * @param {number} ms JS timestamp in milliseconds\n   *\n   * @example\n   * const bundle = new Bundle()\n   * bundle.timestamp(Date.now() + 5000) // in 5 seconds\n   */\n  timestamp(ms) {\n    if (!isInt(ms)) {\n      throw new Error('OSC Bundle needs an integer for setting the timestamp')\n    }\n\n    this.timetag = new AtomicTimetag(ms)\n  }\n\n  /**\n   * Add a Message or Bundle to the list of elements\n   * @param {Bundle|Message} item\n   */\n  add(item) {\n    if (!(item instanceof Message || item instanceof Bundle)) {\n      throw new Error('OSC Bundle contains only Messages and Bundles')\n    }\n\n    this.bundleElements.push(item)\n  }\n\n  /**\n   * Interpret the Bundle as packed binary data\n   * @return {Uint8Array} Packed binary data\n   */\n  pack() {\n    const encoder = new EncodeHelper()\n\n    // an OSC Bundle consists of the OSC-string \"#bundle\"\n    encoder.add(new AtomicString(BUNDLE_TAG))\n\n    // followed by an OSC Time Tag\n    if (!this.timetag) {\n      this.timetag = new AtomicTimetag()\n    }\n\n    encoder.add(this.timetag)\n\n    // followed by zero or more OSC Bundle Elements\n    this.bundleElements.forEach((item) => {\n      encoder.add(new AtomicInt32(item.pack().byteLength))\n      encoder.add(item)\n    })\n\n    return encoder.merge()\n  }\n\n  /**\n   * Unpack binary data to read a Bundle\n   * @param {DataView} dataView The DataView holding the binary representation of a Bundle\n   * @param {number} [initialOffset=0] Offset of DataView before unpacking\n   * @return {number} Offset after unpacking\n   */\n  unpack(dataView, initialOffset = 0) {\n    if (!(dataView instanceof DataView)) {\n      throw new Error('OSC Bundle expects an instance of type DataView')\n    }\n\n    // read the beginning bundle string\n    const parentHead = new AtomicString()\n    parentHead.unpack(dataView, initialOffset)\n\n    if (parentHead.value !== BUNDLE_TAG) {\n      throw new Error('OSC Bundle does not contain a valid #bundle head')\n    }\n\n    // read the timetag\n    const timetag = new AtomicTimetag()\n    let offset = timetag.unpack(dataView, parentHead.offset)\n\n    // read the bundle elements\n    this.bundleElements = []\n\n    while (offset < dataView.byteLength) {\n      const head = new AtomicString()\n      const size = new AtomicInt32()\n\n      offset = size.unpack(dataView, offset)\n\n      // check if Packet is a Bundle or a Message\n      let item\n      head.unpack(dataView, offset)\n\n      if (head.value === BUNDLE_TAG) {\n        item = new Bundle()\n      } else {\n        item = new Message()\n      }\n\n      offset = item.unpack(dataView, offset)\n\n      this.bundleElements.push(item)\n    }\n\n    this.offset = offset\n    this.timetag = timetag\n\n    return this.offset\n  }\n}\n","import AtomicString from './atomic/string'\nimport Bundle, { BUNDLE_TAG } from './bundle'\nimport Message from './message'\n\n/**\n * The unit of transmission of OSC is an OSC Packet. The contents\n * of an OSC packet must be either an OSC Message or an OSC Bundle\n */\nexport default class Packet {\n  /**\n   * Create a Packet instance holding a Message or Bundle\n   * @param {Message|Bundle} [value] Initial Packet value\n   */\n  constructor(value) {\n    if (value && !(value instanceof Message || value instanceof Bundle)) {\n      throw new Error('OSC Packet value has to be Message or Bundle')\n    }\n\n    /** @type {Message|Bundle} value */\n    this.value = value\n    /**\n     * @type {number} offset\n     * @private\n     */\n    this.offset = 0\n  }\n\n  /**\n   * Packs the Packet value. This implementation is more like\n   * a wrapper due to OSC specifications, you could also skip the\n   * Packet and directly work with the Message or Bundle instance\n   * @return {Uint8Array} Packed binary data\n   *\n   * @example\n   * const message = new Message('/test/path', 21.5, 'test')\n   * const packet = new Packet(message)\n   * const packetBinary = packet.pack() // then send it via udp etc.\n   *\n   * // or skip the Packet for convenience\n   * const messageBinary = message.pack()\n   */\n  pack() {\n    if (!this.value) {\n      throw new Error('OSC Packet can not be encoded with empty body')\n    }\n\n    return this.value.pack()\n  }\n\n  /**\n   * Unpack binary data from DataView to read Messages or Bundles\n   * @param {DataView} dataView The DataView holding a binary representation of a Packet\n   * @param {number} [initialOffset=0] Offset of DataView before unpacking\n   * @return {number} Offset after unpacking\n   */\n  unpack(dataView, initialOffset = 0) {\n    if (!(dataView instanceof DataView)) {\n      throw new Error('OSC Packet expects an instance of type DataView')\n    }\n\n    if (dataView.byteLength % 4 !== 0) {\n      throw new Error('OSC Packet byteLength has to be a multiple of four')\n    }\n\n    const head = new AtomicString()\n    head.unpack(dataView, initialOffset)\n\n    let item\n\n    // check if Packet is a Bundle or a Message\n    if (head.value === BUNDLE_TAG) {\n      item = new Bundle()\n    } else {\n      item = new Message()\n    }\n\n    item.unpack(dataView, initialOffset)\n\n    this.offset = item.offset\n    this.value = item\n\n    return this.offset\n  }\n}\n","import {\n  dataView,\n  isArray,\n  isFunction,\n  isInt,\n  isString,\n} from './common/utils'\n\nimport {\n  prepareAddress,\n  prepareRegExPattern,\n} from './common/helpers'\n\nimport Bundle from './bundle'\nimport Message from './message'\nimport Packet from './packet'\n\n/**\n * Default options\n * @private\n */\nconst defaultOptions = {\n  discardLateMessages: false,\n}\n\n/**\n * EventHandler to notify listeners on matching OSC messages and\n * status changes of plugins\n */\nexport default class EventHandler {\n  /**\n   * Create an EventHandler instance\n   * @param {object} options Custom options\n   */\n  constructor(options) {\n    /**\n     * @type {object} options\n     * @private\n     */\n    this.options = { ...defaultOptions, ...options }\n    /**\n     * @type {array} addressHandlers\n     * @private\n     */\n    this.addressHandlers = []\n    /**\n     * @type {object} eventHandlers\n     * @private\n     */\n    this.eventHandlers = {\n      open: [],\n      error: [],\n      close: [],\n    }\n    /**\n     * @type {number} uuid\n     * @private\n     */\n    this.uuid = 0\n  }\n\n  /**\n   * Internally used method to dispatch OSC Packets. Extracts\n   * given Timetags and dispatches them accordingly\n   * @param {Packet} packet\n   * @param {*} [rinfo] Remote address info\n   * @return {boolean} Success state\n   * @private\n   */\n  dispatch(packet, rinfo) {\n    if (!(packet instanceof Packet)) {\n      throw new Error('OSC EventHander dispatch() accepts only arguments of type Packet')\n    }\n\n    if (!packet.value) {\n      throw new Error('OSC EventHander dispatch() can\\'t read empty Packets')\n    }\n\n    if (packet.value instanceof Bundle) {\n      const bundle = packet.value\n\n      return bundle.bundleElements.forEach((bundleItem) => {\n        if (bundleItem instanceof Bundle) {\n          if (bundle.timetag.value.timestamp() < bundleItem.timetag.value.timestamp()) {\n            throw new Error('OSC Bundle timestamp is older than the timestamp of enclosed Bundles')\n          }\n          return this.dispatch(bundleItem)\n        } else if (bundleItem instanceof Message) {\n          const message = bundleItem\n          return this.notify(\n            message.address,\n            message,\n            bundle.timetag.value.timestamp(),\n            rinfo,\n          )\n        }\n\n        throw new Error('OSC EventHander dispatch() can\\'t dispatch unknown Packet value')\n      })\n    } else if (packet.value instanceof Message) {\n      const message = packet.value\n      return this.notify(message.address, message, 0, rinfo)\n    }\n\n    throw new Error('OSC EventHander dispatch() can\\'t dispatch unknown Packet value')\n  }\n\n  /**\n   * Internally used method to invoke listener callbacks. Uses regular\n   * expression pattern matching for OSC addresses\n   * @param {string} name OSC address or event name\n   * @param {*} [data] The data of the event\n   * @param {*} [rinfo] Remote address info\n   * @return {boolean} Success state\n   * @private\n   */\n  call(name, data, rinfo) {\n    let success = false\n\n    // call event handlers\n    if (isString(name) && name in this.eventHandlers) {\n      this.eventHandlers[name].forEach((handler) => {\n        handler.callback(data, rinfo)\n        success = true\n      })\n\n      return success\n    }\n\n    // call address handlers\n    const handlerKeys = Object.keys(this.addressHandlers)\n    const handlers = this.addressHandlers\n\n    handlerKeys.forEach((key) => {\n      let foundMatch = false\n\n      const regex = new RegExp(prepareRegExPattern(prepareAddress(name)), 'g')\n      const test = regex.test(key)\n\n      // found a matching address in our callback handlers\n      if (test && key.length === regex.lastIndex) {\n        foundMatch = true\n      }\n\n      if (!foundMatch) {\n        // try matching address from callback handlers (when given)\n        const reverseRegex = new RegExp(prepareRegExPattern(prepareAddress(key)), 'g')\n        const reverseTest = reverseRegex.test(name)\n\n        if (reverseTest && name.length === reverseRegex.lastIndex) {\n          foundMatch = true\n        }\n      }\n\n      if (foundMatch) {\n        handlers[key].forEach((handler) => {\n          handler.callback(data, rinfo)\n          success = true\n        })\n      }\n    })\n\n    return success\n  }\n\n  /**\n   * Notify the EventHandler of incoming OSC messages or status\n   * changes (*open*, *close*, *error*). Handles OSC address patterns\n   * and executes timed messages. Use binary arrays when\n   * handling directly incoming network data. Packet's or Messages can\n   * also be used\n   * @param {...*} args\n   * The OSC address pattern / event name as string}. For convenience and\n   * Plugin API communication you can also use Message or Packet instances\n   * or ArrayBuffer, Buffer instances (low-level access). The latter will\n   * automatically be unpacked\n   * When using a string you can also pass on data as a second argument\n   * (any type). All regarding listeners will be notified with this data.\n   * As a third argument you can define a javascript timestamp (number or\n   * Date instance) for timed notification of the listeners.\n   * @return {boolean} Success state of notification\n   *\n   * @example\n   * const socket = dgram.createSocket('udp4')\n   * socket.on('message', (message) => {\n   *   this.notify(message)\n   * })\n   *\n   * @example\n   * this.notify('error', error.message)\n   *\n   * @example\n   * const message = new OSC.Message('/test/path', 55)\n   * this.notify(message)\n   *\n   * @example\n   * const message = new OSC.Message('/test/path', 55)\n   * // override timestamp\n   * this.notify(message.address, message, Date.now() + 5000)\n   */\n  notify(...args) {\n    if (args.length === 0) {\n      throw new Error('OSC EventHandler can not be called without any argument')\n    }\n\n    // check for incoming dispatchable OSC data\n    if (args[0] instanceof Packet) {\n      return this.dispatch(args[0], args[1])\n    } else if (args[0] instanceof Bundle || args[0] instanceof Message) {\n      return this.dispatch(new Packet(args[0]), args[1])\n    } else if (!isString(args[0])) {\n      const packet = new Packet()\n      packet.unpack(dataView(args[0]))\n      return this.dispatch(packet, args[1])\n    }\n\n    const name = args[0]\n\n    // data argument\n    let data = null\n\n    if (args.length > 1) {\n      data = args[1]\n    }\n\n    // timestamp argument\n    let timestamp = null\n\n    if (args.length > 2) {\n      if (isInt(args[2])) {\n        timestamp = args[2]\n      } else if (args[2] instanceof Date) {\n        timestamp = args[2].getTime()\n      } else {\n        throw new Error('OSC EventHandler timestamp has to be a number or Date')\n      }\n    }\n\n    // remote address info\n    let rinfo = null\n\n    if (args.length >= 3) {\n      rinfo = args[3]\n    }\n\n    // notify now or later\n    if (timestamp) {\n      const now = Date.now()\n\n      // is message outdated?\n      if (now > timestamp) {\n        if (!this.options.discardLateMessages) {\n          return this.call(name, data, rinfo)\n        }\n      }\n\n      // notify later\n      const that = this\n\n      setTimeout(() => {\n        that.call(name, data, rinfo)\n      }, timestamp - now)\n\n      return true\n    }\n\n    return this.call(name, data, rinfo)\n  }\n\n  /**\n   * Subscribe to a new address or event you want to listen to\n   * @param {string} name The OSC address or event name\n   * @param {function} callback Callback function on notification\n   * @return {number} Subscription identifier (needed to unsubscribe)\n   */\n  on(name, callback) {\n    if (!(isString(name) || isArray(name))) {\n      throw new Error('OSC EventHandler accepts only strings or arrays for address patterns')\n    }\n\n    if (!isFunction(callback)) {\n      throw new Error('OSC EventHandler callback has to be a function')\n    }\n\n    // get next id\n    this.uuid += 1\n\n    // prepare handler\n    const handler = {\n      id: this.uuid,\n      callback,\n    }\n\n    // register event listener\n    if (isString(name) && name in this.eventHandlers) {\n      this.eventHandlers[name].push(handler)\n      return this.uuid\n    }\n\n    // register address listener\n    const address = prepareAddress(name)\n\n    if (!(address in this.addressHandlers)) {\n      this.addressHandlers[address] = []\n    }\n\n    this.addressHandlers[address].push(handler)\n\n    return this.uuid\n  }\n\n  /**\n   * Unsubscribe listener from event notification or address handler\n   * @param {string} name The OSC address or event name\n   * @param {number} subscriptionId Subscription id to identify the handler\n   * @return {boolean} Success state\n   */\n  off(name, subscriptionId) {\n    if (!(isString(name) || isArray(name))) {\n      throw new Error('OSC EventHandler accepts only strings or arrays for address patterns')\n    }\n\n    if (!isInt(subscriptionId)) {\n      throw new Error('OSC EventHandler subscription id has to be a number')\n    }\n\n    let key\n    let haystack\n\n    // event or address listener\n    if (isString(name) && name in this.eventHandlers) {\n      key = name\n      haystack = this.eventHandlers\n    } else {\n      key = prepareAddress(name)\n      haystack = this.addressHandlers\n    }\n\n    // remove the entry\n    if (key in haystack) {\n      return haystack[key].some((item, index) => {\n        if (item.id === subscriptionId) {\n          haystack[key].splice(index, 1)\n          return true\n        }\n\n        return false\n      })\n    }\n\n    return false\n  }\n}\n","// /**\n//  @constructor\n//  @abstract\n//  */\n// const Plugin = () => {\n//   if (this.constructor === Plugin) {\n//   }\n// }\n\n// /**\n// @abstract\n// */\n// Plugin.prototype.close = () => {\n//   throw new Error('Abstract method!')\n// }\n\nexport default class Plugin {\n  constructor() {\n    if (this.constructor === Plugin) {\n      throw new Error('Plugin is an abstract class. Please create or use an implementation!')\n    }\n  }\n\n  /**\n   * Returns the current status of the connection\n   * @return {number} Status ID\n   */\n  status() {\n    throw new Error('Abstract method!')\n  }\n\n  /**\n   * Open socket connection. Specifics depend on implementation.\n   * @param {object} [customOptions] Custom options. See implementation specifics.\n   */\n  // eslint-disable-next-line no-unused-vars\n  open(customOptions = {}) {\n    throw new Error('Abstract method!')\n  }\n\n  /**\n   * Close socket connection and anything else used in the implementation.\n   */\n  close() {\n    throw new Error('Abstract method!')\n  }\n\n  /**\n   * Send an OSC Packet, Bundle or Message. Use options here for\n   * custom receiver, otherwise the global options will be taken\n   * @param {Uint8Array} binary Binary representation of OSC Packet\n   * @param {object} [customOptions] Custom options. Specifics depend on implementation.\n   */\n  // eslint-disable-next-line no-unused-vars\n  send(binary, customOptions = {}) {\n    throw new Error('Abstract method!')\n  }\n}\n","import dgram from 'dgram'\n\nimport Plugin from './plugin'\n\n/**\n * Status flags\n * @private\n */\nconst STATUS = {\n  IS_NOT_INITIALIZED: -1,\n  IS_CONNECTING: 0,\n  IS_OPEN: 1,\n  IS_CLOSING: 2,\n  IS_CLOSED: 3,\n}\n\n/**\n * Default options for open method\n * @private\n */\nconst defaultOpenOptions = {\n  host: 'localhost',\n  port: 41234,\n  exclusive: false,\n}\n\n/**\n * Default options for send method\n * @private\n */\nconst defaultSendOptions = {\n  host: 'localhost',\n  port: 41235,\n}\n\n/**\n * Default options\n * @private\n */\nconst defaultOptions = {\n  type: 'udp4',\n  open: defaultOpenOptions,\n  send: defaultSendOptions,\n}\n\n/**\n * Helper method to merge nested objects\n * @private\n */\nfunction mergeOptions(base, custom) {\n  return {\n    ...defaultOptions,\n    ...base,\n    ...custom,\n    open: { ...defaultOptions.open, ...base.open, ...custom.open },\n    send: { ...defaultOptions.send, ...base.send, ...custom.send },\n  }\n}\n\n/**\n * OSC plugin for simple OSC messaging via udp client\n * and udp server\n */\nexport default class DatagramPlugin extends Plugin {\n  /**\n   * Create an OSC Plugin instance with given options. Defaults to\n   * localhost:41234 for server and localhost:41235 for client messaging\n   * @param {object} [options] Custom options\n   * @param {string} [options.type='udp4'] 'udp4' or 'udp6'\n   * @param {string} [options.open.host='localhost'] Hostname of udp server to bind to\n   * @param {number} [options.open.port=41234] Port of udp server to bind to\n   * @param {boolean} [options.open.exclusive=false] Exclusive flag\n   * @param {string} [options.send.host='localhost'] Hostname of udp client for messaging\n   * @param {number} [options.send.port=41235] Port of udp client for messaging\n   *\n   * @example\n   * const plugin = new OSC.DatagramPlugin({ send: { port: 9912 } })\n   * const osc = new OSC({ plugin: plugin })\n   */\n  constructor(options = {}) {\n    super()\n\n    // `dgram` gets replaced with an undefined value in builds targeting\n    // browser environments\n    if (!dgram) {\n      throw new Error('DatagramPlugin can not be used in browser context')\n    }\n\n    /**\n     * @type {object} options\n     * @private\n     */\n    this.options = mergeOptions({}, options)\n\n    /**\n     * @type {object} socket\n     * @private\n     */\n    this.socket = dgram.createSocket(this.options.type)\n    /**\n     * @type {number} socketStatus\n     * @private\n     */\n    this.socketStatus = STATUS.IS_NOT_INITIALIZED\n\n    // register events\n    this.socket.on('message', (message, rinfo) => {\n      this.notify(message, rinfo)\n    })\n\n    this.socket.on('error', (error) => {\n      this.notify('error', error)\n    })\n\n    /**\n     * @type {function} notify\n     * @private\n     */\n    this.notify = () => {}\n  }\n\n  /**\n   * Internal method to hook into osc library's\n   * EventHandler notify method\n   * @param {function} fn Notify callback\n   * @private\n   */\n  registerNotify(fn) {\n    this.notify = fn\n  }\n\n  /**\n   * Returns the current status of the connection\n   * @return {number} Status ID\n   */\n  status() {\n    return this.socketStatus\n  }\n\n  /**\n   * Bind a udp socket to a hostname and port\n   * @param {object} [customOptions] Custom options\n   * @param {string} [customOptions.host='localhost'] Hostname of udp server to bind to\n   * @param {number} [customOptions.port=41234] Port of udp server to bind to\n   * @param {boolean} [customOptions.exclusive=false] Exclusive flag\n   */\n  open(customOptions = {}) {\n    const options = { ...this.options.open, ...customOptions }\n    const { port, exclusive } = options\n\n    this.socketStatus = STATUS.IS_CONNECTING\n\n    this.socket.bind({\n      address: options.host,\n      port,\n      exclusive,\n    }, () => {\n      this.socketStatus = STATUS.IS_OPEN\n      this.notify('open')\n    })\n  }\n\n  /**\n   * Close udp socket\n   */\n  close() {\n    this.socketStatus = STATUS.IS_CLOSING\n\n    this.socket.close(() => {\n      this.socketStatus = STATUS.IS_CLOSED\n      this.notify('close')\n    })\n  }\n\n  /**\n   * Send an OSC Packet, Bundle or Message. Use options here for\n   * custom port and hostname, otherwise the global options will\n   * be taken\n   * @param {Uint8Array} binary Binary representation of OSC Packet\n   * @param {object} [customOptions] Custom options for udp socket\n   * @param {string} [customOptions.host] Hostname of udp client\n   * @param {number} [customOptions.port] Port of udp client\n   */\n  send(binary, customOptions = {}) {\n    const options = { ...this.options.send, ...customOptions }\n    const { port, host } = options\n\n    this.socket.send(Buffer.from(binary), 0, binary.byteLength, port, host)\n  }\n}\n","// This file gets used instead of the `ws` package during rollup builds\n// targeting browser environments.\n/* eslint-disable no-undef */\n/* eslint-disable no-restricted-globals */\nfunction fillWs() {\n  if (typeof WebSocket !== 'undefined') {\n    return WebSocket\n  } else if (typeof MozWebSocket !== 'undefined') {\n    return MozWebSocket\n  } else if (typeof global !== 'undefined') {\n    return global.WebSocket || global.MozWebSocket\n  } else if (typeof window !== 'undefined') {\n    return window.WebSocket || window.MozWebSocket\n  } else if (typeof self !== 'undefined') {\n    return self.WebSocket || self.MozWebSocket\n  }\n  return undefined\n}\n/* eslint-enable no-undef */\n/* eslint-enable no-restricted-globals */\n\nconst ws = fillWs()\n\n/**\n * Do not export server for browser environments.\n * @private\n */\nexport const WebSocketServer = undefined\n\n/**\n * Return WebSocket client for browser environments.\n * @private\n */\nexport default ws\n","import dgram from 'dgram'\nimport { WebSocketServer } from 'ws'\n\nimport Plugin from './plugin'\n\n/**\n * Status flags\n * @private\n */\nconst STATUS = {\n  IS_NOT_INITIALIZED: -1,\n  IS_CONNECTING: 0,\n  IS_OPEN: 1,\n  IS_CLOSING: 2,\n  IS_CLOSED: 3,\n}\n\n/**\n * Default options\n * @private\n */\nconst defaultOptions = {\n  udpServer: {\n    host: 'localhost',\n    port: 41234,\n    exclusive: false,\n  },\n  udpClient: {\n    host: 'localhost',\n    port: 41235,\n  },\n  wsServer: {\n    host: 'localhost',\n    port: 8080,\n  },\n  receiver: 'ws',\n}\n\n/**\n * Helper method to merge nested objects\n * @private\n */\nfunction mergeOptions(base, custom) {\n  return {\n    ...defaultOptions,\n    ...base,\n    ...custom,\n    udpServer: { ...defaultOptions.udpServer, ...base.udpServer, ...custom.udpServer },\n    udpClient: { ...defaultOptions.udpClient, ...base.udpClient, ...custom.udpClient },\n    wsServer: { ...defaultOptions.wsServer, ...base.wsServer, ...custom.wsServer },\n  }\n}\n\n/**\n * OSC plugin for setting up communication between a Websocket\n * client and a udp client with a bridge inbetween\n */\nexport default class BridgePlugin extends Plugin {\n  /**\n   * Create an OSC Bridge instance with given options. Defaults to\n   * localhost:41234 for udp server, localhost:41235 for udp client and\n   * localhost:8080 for Websocket server\n   * @param {object} [options] Custom options\n   * @param {string} [options.udpServer.host='localhost'] Hostname of udp server to bind to\n   * @param {number} [options.udpServer.port=41234] Port of udp server to bind to\n   * @param {boolean} [options.udpServer.exclusive=false] Exclusive flag\n   * @param {string} [options.udpClient.host='localhost'] Hostname of udp client for messaging\n   * @param {number} [options.udpClient.port=41235] Port of udp client for messaging\n   * @param {string} [options.wsServer.host='localhost'] Hostname of Websocket server\n   * @param {number} [options.wsServer.port=8080] Port of Websocket server\n   * @param {http.Server|https.Server} [options.wsServer.server] Use existing Node.js HTTP/S server\n   * @param {string} [options.receiver='ws'] Where messages sent via 'send' method will be\n   * delivered to, 'ws' for Websocket clients, 'udp' for udp client\n   *\n   * @example\n   * const plugin = new OSC.BridgePlugin({ wsServer: { port: 9912 } })\n   * const osc = new OSC({ plugin: plugin })\n   *\n   * @example <caption>Using an existing HTTP server</caption>\n   * const http = require('http')\n   * const httpServer = http.createServer();\n   * const plugin = new OSC.BridgePlugin({ wsServer: { server: httpServer } })\n   * const osc = new OSC({ plugin: plugin })\n   */\n  constructor(options = {}) {\n    super()\n\n    // `dgram` and `WebSocketServer` get replaced with an undefined value in\n    // builds targeting browser environments\n    if (!dgram || !WebSocketServer) {\n      throw new Error('BridgePlugin can not be used in browser context')\n    }\n\n    /** @type {object} options\n     * @private\n     */\n    this.options = mergeOptions({}, options)\n\n    /**\n     * @type {object} websocket\n     * @private\n     */\n    this.websocket = null\n\n    /**\n     * @type {object} socket\n     * @private\n     */\n    this.socket = dgram.createSocket('udp4')\n    /**\n     * @type {number} socketStatus\n     * @private\n     */\n    this.socketStatus = STATUS.IS_NOT_INITIALIZED\n\n    // register udp events\n    this.socket.on('message', (message) => {\n      this.send(message, { receiver: 'ws' })\n      this.notify(message.buffer)\n    })\n\n    this.socket.on('error', (error) => {\n      this.notify('error', error)\n    })\n\n    /**\n     * @type {function} notify\n     * @private\n     */\n    this.notify = () => {}\n  }\n\n  /**\n   * Internal method to hook into osc library's\n   * EventHandler notify method\n   * @param {function} fn Notify callback\n   * @private\n   */\n  registerNotify(fn) {\n    this.notify = fn\n  }\n\n  /**\n   * Returns the current status of the connection\n   * @return {number} Status ID\n   */\n  status() {\n    return this.socketStatus\n  }\n\n  /**\n   * Bind a udp socket to a hostname and port\n   * @param {object} [customOptions] Custom options\n   * @param {string} [customOptions.host='localhost'] Hostname of udp server to bind to\n   * @param {number} [customOptions.port=41234] Port of udp server to bind to\n   * @param {boolean} [customOptions.exclusive=false] Exclusive flag\n   */\n  open(customOptions = {}) {\n    const options = mergeOptions(this.options, customOptions)\n\n    this.socketStatus = STATUS.IS_CONNECTING\n\n    // bind udp server\n    this.socket.bind({\n      address: options.udpServer.host,\n      port: options.udpServer.port,\n      exclusive: options.udpServer.exclusive,\n    }, () => {\n      let wsServerOptions = {}\n      if (options.wsServer.server) {\n        wsServerOptions.server = options.wsServer.server\n      } else {\n        wsServerOptions = options.wsServer\n      }\n\n      // bind Websocket server\n      this.websocket = new WebSocketServer(wsServerOptions)\n      this.websocket.binaryType = 'arraybuffer'\n\n      // register Websocket events\n      this.websocket.on('listening', () => {\n        this.socketStatus = STATUS.IS_OPEN\n        this.notify('open')\n      })\n\n      this.websocket.on('error', (error) => {\n        this.notify('error', error)\n      })\n\n      this.websocket.on('connection', (client) => {\n        client.on('message', (message, rinfo) => {\n          this.send(message, { receiver: 'udp' })\n          this.notify(new Uint8Array(message), rinfo)\n        })\n      })\n    })\n  }\n\n  /**\n   * Close udp socket and Websocket server\n   */\n  close() {\n    this.socketStatus = STATUS.IS_CLOSING\n\n    // close udp socket\n    this.socket.close(() => {\n      // close Websocket\n      this.websocket.close(() => {\n        this.socketStatus = STATUS.IS_CLOSED\n        this.notify('close')\n      })\n    })\n  }\n\n  /**\n   * Send an OSC Packet, Bundle or Message. Use options here for\n   * custom receiver, otherwise the global options will be taken\n   * @param {Uint8Array} binary Binary representation of OSC Packet\n   * @param {object} [customOptions] Custom options\n   * @param {string} [customOptions.udpClient.host='localhost'] Hostname of udp client for messaging\n   * @param {number} [customOptions.udpClient.port=41235] Port of udp client for messaging\n   * @param {string} [customOptions.receiver='ws'] Messages will be delivered to Websocket ('ws')\n   * clients or udp client ('udp')\n   */\n  send(binary, customOptions = {}) {\n    const options = mergeOptions(this.options, customOptions)\n    const { receiver } = options\n\n    if (receiver === 'udp') {\n      // send data to udp client\n      const data = binary instanceof Buffer ? binary : Buffer.from(binary)\n      this.socket.send(\n        data,\n        0,\n        data.byteLength,\n        options.udpClient.port,\n        options.udpClient.host,\n      )\n    } else if (receiver === 'ws') {\n      // send data to all Websocket clients\n      this.websocket.clients.forEach((client) => {\n        client.send(binary, { binary: true })\n      })\n    } else {\n      throw new Error('BridgePlugin can not send message to unknown receiver')\n    }\n  }\n}\n","import WebSocket from 'ws'\n\nimport Plugin from './plugin'\n\n/**\n * Status flags\n * @private\n */\nconst STATUS = {\n  IS_NOT_INITIALIZED: -1,\n  IS_CONNECTING: 0,\n  IS_OPEN: 1,\n  IS_CLOSING: 2,\n  IS_CLOSED: 3,\n}\n\n/**\n * Default options\n * @private\n */\nconst defaultOptions = {\n  host: 'localhost',\n  port: 8080,\n  secure: false,\n  protocol: [],\n}\n\n/**\n * OSC plugin for a Websocket client running in node or browser context\n */\nexport default class WebsocketClientPlugin extends Plugin {\n  /**\n   * Create an OSC WebsocketClientPlugin instance with given options.\n   * Defaults to *localhost:8080* for connecting to a Websocket server\n   * @param {object} [options] Custom options\n   * @param {string} [options.host='localhost'] Hostname of Websocket server\n   * @param {number} [options.port=8080] Port of Websocket server\n   * @param {boolean} [options.secure=false] Use wss:// for secure connections\n   * @param {string|string[]} [options.protocol=''] Subprotocol of Websocket server\n   *\n   * @example\n   * const plugin = new OSC.WebsocketClientPlugin({ port: 9912 })\n   * const osc = new OSC({ plugin: plugin })\n   */\n  constructor(options) {\n    super()\n\n    if (!WebSocket) {\n      throw new Error('WebsocketClientPlugin can\\'t find a WebSocket class')\n    }\n\n    /**\n     * @type {object} options\n     * @private\n     */\n    this.options = { ...defaultOptions, ...options }\n\n    /**\n     * @type {object} socket\n     * @private\n     */\n    this.socket = null\n    /**\n     * @type {number} socketStatus\n     * @private\n     */\n    this.socketStatus = STATUS.IS_NOT_INITIALIZED\n\n    /**\n     * @type {function} notify\n     * @private\n     */\n    this.notify = () => {}\n  }\n\n  /**\n   * Internal method to hook into osc library's\n   * EventHandler notify method\n   * @param {function} fn Notify callback\n   * @private\n   */\n  registerNotify(fn) {\n    this.notify = fn\n  }\n\n  /**\n   * Returns the current status of the connection\n   * @return {number} Status identifier\n   */\n  status() {\n    return this.socketStatus\n  }\n\n  /**\n   * Connect to a Websocket server. Defaults to global options\n   * @param {object} [customOptions] Custom options\n   * @param {string} [customOptions.host] Hostname of Websocket server\n   * @param {number} [customOptions.port] Port of Websocket server\n   * @param {boolean} [customOptions.secure] Use wss:// for secure connections\n   * @param {string|string[]} [options.protocol] Subprotocol of Websocket server\n   */\n  open(customOptions = {}) {\n    const options = { ...this.options, ...customOptions }\n    const {\n      port, host, secure, protocol,\n    } = options\n\n    // close socket when already given\n    if (this.socket) {\n      this.close()\n    }\n\n    // create websocket client\n    const scheme = secure ? 'wss' : 'ws'\n    const rinfo = {\n      address: host,\n      family: scheme,\n      port,\n      size: 0,\n    }\n\n    this.socket = new WebSocket(`${scheme}://${host}:${port}`, protocol)\n    this.socket.binaryType = 'arraybuffer'\n    this.socketStatus = STATUS.IS_CONNECTING\n\n    // register events\n    this.socket.onopen = () => {\n      this.socketStatus = STATUS.IS_OPEN\n      this.notify('open')\n    }\n\n    this.socket.onclose = () => {\n      this.socketStatus = STATUS.IS_CLOSED\n      this.notify('close')\n    }\n\n    this.socket.onerror = (error) => {\n      this.notify('error', error)\n    }\n\n    this.socket.onmessage = (message) => {\n      this.notify(message.data, rinfo)\n    }\n  }\n\n  /**\n   * Close Websocket\n   */\n  close() {\n    this.socketStatus = STATUS.IS_CLOSING\n    this.socket.close()\n  }\n\n  /**\n   * Send an OSC Packet, Bundle or Message to Websocket server\n   * @param {Uint8Array} binary Binary representation of OSC Packet\n   */\n  send(binary) {\n    this.socket.send(binary)\n  }\n}\n","import { WebSocketServer } from 'ws'\n\nimport Plugin from './plugin'\n\n/**\n * Status flags\n * @private\n */\nconst STATUS = {\n  IS_NOT_INITIALIZED: -1,\n  IS_CONNECTING: 0,\n  IS_OPEN: 1,\n  IS_CLOSING: 2,\n  IS_CLOSED: 3,\n}\n\n/**\n * Default options\n * @private\n */\nconst defaultOptions = {\n  host: 'localhost',\n  port: 8080,\n}\n\n/**\n * This will import the types for JSDoc/Type declarations without\n * impacting the runtime\n * @typedef {import('http').Server|import('https').Server} Server\n */\n\n/**\n * OSC plugin for a Websocket client running in node or browser context\n */\nexport default class WebsocketServerPlugin extends Plugin {\n  /**\n   * Create an OSC WebsocketServerPlugin instance with given options.\n   * Defaults to *localhost:8080* for the Websocket server\n   * @param {object} [options] Custom options\n   * @param {string} [options.host='localhost'] Hostname of Websocket server\n   * @param {number} [options.port=8080] Port of Websocket server\n   * @param {Server} [options.server] Use existing Node.js HTTP/S server\n   *\n   * @example\n   * const plugin = new OSC.WebsocketServerPlugin({ port: 9912 })\n   * const osc = new OSC({ plugin: plugin })\n   *\n   * osc.open() // start server\n   * @example <caption>Using an existing HTTP server</caption>\n   * const http = require('http')\n   * const httpServer = http.createServer();\n   * const plugin = new OSC.WebsocketServerPlugin({ server: httpServer })\n   * const osc = new OSC({ plugin: plugin })\n   */\n  constructor(options) {\n    super()\n\n    // `WebSocketServer` gets replaced with an undefined value in builds\n    // targeting browser environments\n    if (!WebSocketServer) {\n      throw new Error('WebsocketServerPlugin can not be used in browser context')\n    }\n\n    /**\n     * @type {object} options\n     * @private\n     */\n    this.options = { ...defaultOptions, ...options }\n\n    /**\n     * @type {object} socket\n     * @private\n     */\n    this.socket = null\n    /**\n     * @type {number} socketStatus\n     * @private\n     */\n    this.socketStatus = STATUS.IS_NOT_INITIALIZED\n\n    /**\n     * @type {function} notify\n     * @private\n     */\n    this.notify = () => {}\n  }\n\n  /**\n   * Internal method to hook into osc library's\n   * EventHandler notify method\n   * @param {function} fn Notify callback\n   * @private\n   */\n  registerNotify(fn) {\n    this.notify = fn\n  }\n\n  /**\n   * Returns the current status of the connection\n   * @return {number} Status identifier\n   */\n  status() {\n    return this.socketStatus\n  }\n\n  /**\n   * Start a Websocket server. Defaults to global options\n   * @param {object} [customOptions] Custom options\n   * @param {string} [customOptions.host] Hostname of Websocket server\n   * @param {number} [customOptions.port] Port of Websocket server\n   */\n  open(customOptions = {}) {\n    const options = { ...this.options, ...customOptions }\n    const { port, host } = options\n    const rinfo = {\n      address: host,\n      family: 'wsserver',\n      port,\n      size: 0,\n    }\n\n    // close socket when already given\n    if (this.socket) {\n      this.close()\n    }\n\n    // create websocket server\n    if (options.server) {\n      this.socket = new WebSocketServer({ server: options.server })\n    } else {\n      this.socket = new WebSocketServer({ host, port })\n    }\n\n    this.socket.binaryType = 'arraybuffer'\n    this.socketStatus = STATUS.IS_CONNECTING\n\n    // register events\n    this.socket.on('listening', () => {\n      this.socketStatus = STATUS.IS_OPEN\n      this.notify('open')\n    })\n\n    this.socket.on('error', (error) => {\n      this.notify('error', error)\n    })\n\n    this.socket.on('connection', (client) => {\n      client.on('message', (message) => {\n        this.notify(new Uint8Array(message), rinfo)\n      })\n    })\n  }\n\n  /**\n   * Close Websocket server\n   */\n  close() {\n    this.socketStatus = STATUS.IS_CLOSING\n\n    this.socket.close(() => {\n      this.socketStatus = STATUS.IS_CLOSED\n      this.notify('close')\n    })\n  }\n\n  /**\n   * Send an OSC Packet, Bundle or Message to Websocket clients\n   * @param {Uint8Array} binary Binary representation of OSC Packet\n   */\n  send(binary) {\n    this.socket.clients.forEach((client) => {\n      client.send(binary, { binary: true })\n    })\n  }\n}\n","import {\n  isFunction,\n  isInt,\n  isObject,\n  isString,\n} from './common/utils'\n\nimport Bundle from './bundle'\nimport EventHandler from './events'\nimport Message, { TypedMessage } from './message'\nimport Packet from './packet'\n\nimport DatagramPlugin from './plugin/dgram'\nimport BridgePlugin from './plugin/bridge'\nimport WebsocketClientPlugin from './plugin/wsclient'\nimport WebsocketServerPlugin from './plugin/wsserver'\nimport Plugin from './plugin/plugin'\n\n/**\n * Default options\n * @private\n */\nconst defaultOptions = {\n  discardLateMessages: false,\n  plugin: new WebsocketClientPlugin(),\n}\n\n/**\n * Status flags\n */\nconst STATUS = {\n  IS_NOT_INITIALIZED: -1,\n  IS_CONNECTING: 0,\n  IS_OPEN: 1,\n  IS_CLOSING: 2,\n  IS_CLOSED: 3,\n}\n\n/**\n * OSC interface to send OSC Packets and listen to status changes and\n * incoming message events. Offers a Plugin API for different network\n * protocols, defaults to a simple Websocket client for OSC communication\n * between a browser js-app and a js-node server\n *\n * @example\n * const osc = new OSC()\n *\n * osc.on('/input/test', message => {\n *   // print incoming OSC message arguments\n *   console.log(message.args)\n * })\n *\n * osc.on('open', () => {\n *   const message = new Message('/test/path', 55.12, 'hello')\n *   osc.send(message)\n * })\n *\n * osc.open({ host: '192.168.178.115', port: 9012 })\n */\nclass OSC {\n  /**\n   * Create an OSC instance with given options\n   * @param {object} [options] Custom options\n   * @param {boolean} [options.discardLateMessages=false] Ignore incoming\n   * messages when given timetag lies in the past\n   * @param {Plugin} [options.plugin=WebsocketClientPlugin] Add a connection plugin\n   * to this interface, defaults to a plugin with Websocket client.\n   * Open README.md for further information on how to handle plugins or\n   * how to write your own with the Plugin API\n   *\n   * @example\n   * const osc = new OSC() // default options with Websocket client\n   *\n   * @example\n   * const osc = new OSC({ discardLateMessages: true })\n   *\n   * @example\n   * const websocketPlugin = new OSC.WebsocketClientPlugin()\n   * const osc = new OSC({ plugin: websocketPlugin })\n   */\n  constructor(options) {\n    if (options && !isObject(options)) {\n      throw new Error('OSC options argument has to be an object.')\n    }\n\n    /**\n     * @type {object} options\n     * @private\n     */\n    this.options = { ...defaultOptions, ...options }\n    /**\n     * @type {EventHandler} eventHandler\n     * @private\n     */\n    this.eventHandler = new EventHandler({\n      discardLateMessages: this.options.discardLateMessages,\n    })\n\n    // pass EventHandler's notify() to plugin\n    const { eventHandler } = this\n    if (this.options.plugin && this.options.plugin.registerNotify) {\n      this.options.plugin.registerNotify((...args) => eventHandler.notify(...args))\n    }\n  }\n\n  /**\n   * Listen to a status-change event or incoming OSC message with\n   * address pattern matching\n   * @param {string} eventName Event name or OSC address pattern\n   * @param {function} callback Function which is called on notification\n   * @return {number} Subscription id (needed to unsubscribe)\n   *\n   * @example\n   * // will be called when server receives /in!trument/* for example\n   * osc.on('/instrument/1', message => {\n   *   console.log(message)\n   * })\n   *\n   * @example\n   * // will be called for every message since it uses the wildcard symbol\n   * osc.on('*', message => {\n   *   console.log(message)\n   * })\n   *\n   * @example\n   * // will be called on network socket error\n   * osc.on('error', message => {\n   *   console.log(message)\n   * })\n   */\n  on(eventName, callback) {\n    if (!(isString(eventName) && isFunction(callback))) {\n      throw new Error('OSC on() needs event- or address string and callback function')\n    }\n\n    return this.eventHandler.on(eventName, callback)\n  }\n\n  /**\n   * Unsubscribe an event listener\n   * @param {string} eventName Event name or OSC address pattern\n   * @param {number} subscriptionId The subscription id\n   * @return {boolean} Success state\n   *\n   * @example\n   * const listenerId = osc.on('error', message => {\n   *   console.log(message)\n   * })\n   * osc.off('error', listenerId) // unsubscribe from error event\n   */\n  off(eventName, subscriptionId) {\n    if (!(isString(eventName) && isInt(subscriptionId))) {\n      throw new Error('OSC off() needs string and number (subscriptionId) to unsubscribe')\n    }\n\n    return this.eventHandler.off(eventName, subscriptionId)\n  }\n\n  /**\n   * Open network socket with plugin. This method is used by\n   * plugins and is not available without (see Plugin API for more information)\n   * @param {object} [options] Custom global options for plugin instance\n   *\n   * @example\n   * const osc = new OSC({ plugin: new OSC.DatagramPlugin() })\n   * osc.open({ host: '127.0.0.1', port: 8080 })\n   */\n  open(options) {\n    if (options && !isObject(options)) {\n      throw new Error('OSC open() options argument needs to be an object')\n    }\n\n    if (!(this.options.plugin && isFunction(this.options.plugin.open))) {\n      throw new Error('OSC Plugin API #open is not implemented!')\n    }\n\n    return this.options.plugin.open(options)\n  }\n\n  /**\n   * Returns the current status of the connection. See *STATUS* for\n   * different possible states. This method is used by plugins\n   * and is not available without (see Plugin API for more information)\n   * @return {number} Status identifier\n   *\n   * @example\n   * import OSC, { STATUS } from 'osc'\n   * const osc = new OSC()\n   * if (osc.status() === STATUS.IS_CONNECTING) {\n   *   // do something\n   * }\n   */\n  status() {\n    if (!(this.options.plugin && isFunction(this.options.plugin.status))) {\n      throw new Error('OSC Plugin API #status is not implemented!')\n    }\n\n    return this.options.plugin.status()\n  }\n\n  /**\n   * Close connection. This method is used by plugins and is not\n   * available without (see Plugin API for more information)\n   */\n  close() {\n    if (!(this.options.plugin && isFunction(this.options.plugin.close))) {\n      throw new Error('OSC Plugin API #close is not implemented!')\n    }\n\n    return this.options.plugin.close()\n  }\n\n  /**\n   * Send an OSC Packet, Bundle or Message. This method is used by plugins\n   * and is not available without (see Plugin API for more information)\n   * @param {Packet|Bundle|Message|TypedMessage} packet OSC Packet, Bundle or Message instance\n   * @param {object} [options] Custom options\n   *\n   * @example\n   * const osc = new OSC({ plugin: new OSC.DatagramPlugin() })\n   * osc.open({ host: '127.0.0.1', port: 8080 })\n   *\n   * const message = new OSC.Message('/test/path', 55.1, 57)\n   * osc.send(message)\n   *\n   * // send message again to custom address\n   * osc.send(message, { host: '192.168.178.115', port: 9001 })\n   */\n  send(packet, options) {\n    if (!(this.options.plugin && isFunction(this.options.plugin.send))) {\n      throw new Error('OSC Plugin API #send is not implemented!')\n    }\n\n    if (!(packet instanceof TypedMessage\n        || packet instanceof Message\n        || packet instanceof Bundle\n        || packet instanceof Packet)\n    ) {\n      throw new Error('OSC send() needs Messages, Bundles or Packets')\n    }\n\n    if (options && !isObject(options)) {\n      throw new Error('OSC send() options argument has to be an object')\n    }\n\n    return this.options.plugin.send(packet.pack(), options)\n  }\n}\n\n// expose status flags\nOSC.STATUS = STATUS\n\n// expose OSC classes\nOSC.Packet = Packet\nOSC.Bundle = Bundle\nOSC.Message = Message\nOSC.TypedMessage = TypedMessage\n\n// expose plugins\nOSC.Plugin = Plugin\nOSC.DatagramPlugin = DatagramPlugin\nOSC.WebsocketClientPlugin = WebsocketClientPlugin\nOSC.WebsocketServerPlugin = WebsocketServerPlugin\nOSC.BridgePlugin = BridgePlugin\n\nexport default OSC\n"],"names":["isInt","n","Number","isNumber","isString","isBoolean","isInfinity","Infinity","isArray","Object","prototype","toString","call","isObject","isFunction","isBlob","Uint8Array","isDate","Date","isUndefined","isNull","pad","hasProperty","name","hasOwnProperty","global","window","dataView","obj","buffer","DataView","ArrayBuffer","typeTag","item","Error","prepareAddress","address","concat","join","length","slice","prepareRegExPattern","str","replace","EncodeHelper","_classCallCheck","this","data","byteLength","value","pack","push","result","offset","forEach","set","Atomic","method","initialOffset","AtomicInt32","_super","_get","_getPrototypeOf","STR_ENCODING","charCodesToString","charCodes","Buffer","from","TextDecoder","decode","Int8Array","i","String","fromCharCode","apply","AtomicString","terminated","charCodeAt","charcode","getUint8","SECONDS_70_YEARS","TWO_POWER_32","Timetag","seconds","fractions","_createClass","key","milliseconds","rounded","Math","floor","round","AtomicTimetag","arguments","undefined","now","timetag","timestamp","getTime","_this$value","setInt32","getUint32","AtomicBlob","getInt32","AtomicFloat32","AtomicFloat64","MAX_INT64","BigInt","MIN_INT64","AtomicInt64","tmp","asIntN","MAX_UINT64","AtomicUInt64","asUintN","VALUE_TRUE","VALUE_FALSE","VALUE_NONE","VALUE_INFINITY","TypedMessage","args","_this","types","add","type","_this2","encoder","Helper","argument","index","merge","unpack","next","Message","_this3","oscArgs","_len","Array","_key","shift","map","BUNDLE_TAG","Bundle","bundleElements","ms","parentHead","head","size","Packet","defaultOptions","discardLateMessages","EventHandler","options","_objectSpread","addressHandlers","eventHandlers","open","error","close","uuid","packet","rinfo","bundle","bundleItem","dispatch","message","notify","success","handler","callback","handlerKeys","keys","handlers","foundMatch","regex","RegExp","test","lastIndex","reverseRegex","that","setTimeout","id","subscriptionId","haystack","some","splice","Plugin","constructor","binary","STATUS","DatagramPlugin","fn","socketStatus","customOptions","port","exclusive","socket","bind","host","send","ws","WebSocket","MozWebSocket","self","WebSocketServer","udpServer","udpClient","wsServer","receiver","mergeOptions","base","custom","BridgePlugin","wsServerOptions","server","websocket","binaryType","on","client","clients","secure","protocol","WebsocketClientPlugin","scheme","family","onopen","onclose","onerror","onmessage","WebsocketServerPlugin","plugin","OSC","eventHandler","registerNotify","eventName","off","status","IS_NOT_INITIALIZED","IS_CONNECTING","IS_OPEN","IS_CLOSING","IS_CLOSED"],"mappings":"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"}